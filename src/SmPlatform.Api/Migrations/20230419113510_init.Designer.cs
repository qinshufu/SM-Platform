// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmPlatform.Api.Instructure;

#nullable disable

namespace SmPlatform.Api.Migrations
{
    [DbContext(typeof(SmsDbContext))]
    [Migration("20230419113510_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SmPlatform.Model.DataModels.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Creater")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Updater")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Entity");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SmPlatform.Model.DataModels.BlackList", b =>
                {
                    b.HasBaseType("SmPlatform.Model.DataModels.Entity");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("BlackList", (string)null);
                });

            modelBuilder.Entity("SmPlatform.Model.DataModels.Configuration", b =>
                {
                    b.HasBaseType("SmPlatform.Model.DataModels.Entity");

                    b.Property<string>("AccessKeyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccessKeySecret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<Guid?>("MessageReceiveLogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MessageValueType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_otherOptions")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("{}")
                        .HasColumnName("OtherOptions");

                    b.HasIndex("MessageReceiveLogId");

                    b.HasIndex("PlatformId");

                    b.ToTable("Configuration", (string)null);
                });

            modelBuilder.Entity("SmPlatform.Model.DataModels.ManualProcess", b =>
                {
                    b.HasBaseType("SmPlatform.Model.DataModels.Entity");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestArguments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SignatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_channels")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("[]")
                        .HasColumnName("Channels");

                    b.HasIndex("SignatureId");

                    b.ToTable("ManualProcess", (string)null);
                });

            modelBuilder.Entity("SmPlatform.Model.DataModels.MessageReceiveLog", b =>
                {
                    b.HasBaseType("SmPlatform.Model.DataModels.Entity");

                    b.Property<string>("ApiLogId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Business")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ElapsedTime")
                        .HasColumnType("float");

                    b.Property<string>("Error")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Platform")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ReceiveSuccessed")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SignatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("_requestParams")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("{}")
                        .HasColumnName("RequestParams");

                    b.HasIndex("SignatureId");

                    b.HasIndex("TemplateId");

                    b.ToTable("MessageReceiveLog", (string)null);
                });

            modelBuilder.Entity("SmPlatform.Model.DataModels.MessageSendLog", b =>
                {
                    b.HasBaseType("SmPlatform.Model.DataModels.Entity");

                    b.Property<string>("ApiLogId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ConfigurationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ElapsedTime")
                        .HasColumnType("float");

                    b.Property<string>("Error")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SendSuccessed")
                        .HasColumnType("bit");

                    b.Property<Guid>("SignatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("_requestParams")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("{}")
                        .HasColumnName("RequestParams");

                    b.Property<string>("_responseParams")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("{}")
                        .HasColumnName("ResponseParams");

                    b.HasIndex("ConfigurationId");

                    b.HasIndex("PlatformId");

                    b.HasIndex("SignatureId");

                    b.HasIndex("TemplateId");

                    b.ToTable("MessageSendLog", (string)null);
                });

            modelBuilder.Entity("SmPlatform.Model.DataModels.Platform", b =>
                {
                    b.HasBaseType("SmPlatform.Model.DataModels.Entity");

                    b.Property<string>("AccessKeyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccessKeySecret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NeedAuthentication")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Platform", (string)null);
                });

            modelBuilder.Entity("SmPlatform.Model.DataModels.Signature", b =>
                {
                    b.HasBaseType("SmPlatform.Model.DataModels.Entity");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Signature", (string)null);
                });

            modelBuilder.Entity("SmPlatform.Model.DataModels.Template", b =>
                {
                    b.HasBaseType("SmPlatform.Model.DataModels.Entity");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Template", (string)null);
                });

            modelBuilder.Entity("SmPlatform.Model.DataModels.TimedMessage", b =>
                {
                    b.HasBaseType("SmPlatform.Model.DataModels.Entity");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Sended")
                        .HasColumnType("bit");

                    b.Property<Guid>("SignatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("_requestParams")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("{}")
                        .HasColumnName("RequestParams");

                    b.HasIndex("SignatureId");

                    b.HasIndex("TemplateId");

                    b.ToTable("TimedMessage", (string)null);
                });

            modelBuilder.Entity("SmPlatform.Model.DataModels.BlackList", b =>
                {
                    b.HasOne("SmPlatform.Model.DataModels.Entity", null)
                        .WithOne()
                        .HasForeignKey("SmPlatform.Model.DataModels.BlackList", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmPlatform.Model.DataModels.Configuration", b =>
                {
                    b.HasOne("SmPlatform.Model.DataModels.Entity", null)
                        .WithOne()
                        .HasForeignKey("SmPlatform.Model.DataModels.Configuration", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmPlatform.Model.DataModels.MessageReceiveLog", null)
                        .WithMany("Configurations")
                        .HasForeignKey("MessageReceiveLogId");

                    b.HasOne("SmPlatform.Model.DataModels.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("SmPlatform.Model.DataModels.ManualProcess", b =>
                {
                    b.HasOne("SmPlatform.Model.DataModels.Entity", null)
                        .WithOne()
                        .HasForeignKey("SmPlatform.Model.DataModels.ManualProcess", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmPlatform.Model.DataModels.Signature", "Signature")
                        .WithMany()
                        .HasForeignKey("SignatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Signature");
                });

            modelBuilder.Entity("SmPlatform.Model.DataModels.MessageReceiveLog", b =>
                {
                    b.HasOne("SmPlatform.Model.DataModels.Entity", null)
                        .WithOne()
                        .HasForeignKey("SmPlatform.Model.DataModels.MessageReceiveLog", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmPlatform.Model.DataModels.Signature", "Signature")
                        .WithMany()
                        .HasForeignKey("SignatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmPlatform.Model.DataModels.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Signature");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("SmPlatform.Model.DataModels.MessageSendLog", b =>
                {
                    b.HasOne("SmPlatform.Model.DataModels.Configuration", "Configuration")
                        .WithMany()
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmPlatform.Model.DataModels.Entity", null)
                        .WithOne()
                        .HasForeignKey("SmPlatform.Model.DataModels.MessageSendLog", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmPlatform.Model.DataModels.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmPlatform.Model.DataModels.Signature", "Signature")
                        .WithMany()
                        .HasForeignKey("SignatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmPlatform.Model.DataModels.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");

                    b.Navigation("Platform");

                    b.Navigation("Signature");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("SmPlatform.Model.DataModels.Platform", b =>
                {
                    b.HasOne("SmPlatform.Model.DataModels.Entity", null)
                        .WithOne()
                        .HasForeignKey("SmPlatform.Model.DataModels.Platform", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmPlatform.Model.DataModels.Signature", b =>
                {
                    b.HasOne("SmPlatform.Model.DataModels.Entity", null)
                        .WithOne()
                        .HasForeignKey("SmPlatform.Model.DataModels.Signature", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmPlatform.Model.DataModels.Template", b =>
                {
                    b.HasOne("SmPlatform.Model.DataModels.Entity", null)
                        .WithOne()
                        .HasForeignKey("SmPlatform.Model.DataModels.Template", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmPlatform.Model.DataModels.TimedMessage", b =>
                {
                    b.HasOne("SmPlatform.Model.DataModels.Entity", null)
                        .WithOne()
                        .HasForeignKey("SmPlatform.Model.DataModels.TimedMessage", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmPlatform.Model.DataModels.Signature", "Signature")
                        .WithMany()
                        .HasForeignKey("SignatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmPlatform.Model.DataModels.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Signature");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("SmPlatform.Model.DataModels.MessageReceiveLog", b =>
                {
                    b.Navigation("Configurations");
                });
#pragma warning restore 612, 618
        }
    }
}
